<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Foniod</title>
    <link>http://foniod.org/</link>
    <description>Recent content on Foniod</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://foniod.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://foniod.org/docs/configuration/auto-kill/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/configuration/auto-kill/</guid>
      <description>Automatically kill programs InGRAINd can execute various commands to react to certain events with minimum overhead.
Because events are not intercepted, merely observed by the eBPF probe, InGRAIN cannot block a program from executing a certain action.
However, using the events pipeline to filter and execute commands, InGRAIN can react to events quickly and reliably without involving other processing components. This means you fundamentally cannot stop a task from executing, but long-running processes can be killed.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/configuration/backends/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/configuration/backends/</guid>
      <description>Backends To export data from InGRAINd, you can use a number of backends.
These backends can process or forward the data in any way you want. Currently, the following integrations are available:
  Console   S3   StatsD+   HTTP   The flush frequency of a backend can be controlled by using a Buffer pipeline step. If you don&amp;rsquo;t specify either interval_s or interval_ms in seconds or milliseconds, respectively, then the by default events are cached for 10 seconds before being forwarded to the backend.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/configuration/containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/configuration/containers/</guid>
      <description>Containers Monitoring containerised workloads is usually not an easy thing to do. With InGRAINd, you can get the ID of the Docker container that&amp;rsquo;s hosting the applications with simply including the following in the Container step in your pipeline.
[[pipeline.console.steps]] type = &amp;quot;Container&amp;quot;  This will add the docker_id tag to each event that comes from a container, allowing you to link them to a running Docker container.
Since Kubernetes is based on Docker, this also allows you to monitor workloads in Kubernetes clusters.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/configuration/network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/configuration/network/</guid>
      <description>Network monitoring The network monitoring grain in InGRAINd collects network events straight from the kernel, unlike most network monitoring solutions. Because of this, InGRAINd can observe detailed statistics about the network behaviour of applications without impacting network throughput and performance.
Enabling network monitoring for all network interfaces, therefore, is as easy as enabling the Network probe in config.toml:
[[probe]] pipelines = [&amp;quot;console&amp;quot;] [probe.config] type = &amp;quot;Network&amp;quot;  The grain monitors all outgoing connections from the box, and will print the details of outgoing connections:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/configuration/osquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/configuration/osquery/</guid>
      <description>OsQuery  OsQuery is an endpoint visibility solution originally developed at Facebook, and now maintained by The Linux Foundation.
While OsQuery is most often deployed to monitor laptops and desktop computers, we included it in the default InGRAINd Docker images to collect dynamic configuration and runtime information about your environment.
For instance, you can use the OsQuery integration to report statistics about your processes CPU use periodically using the following configuration:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/configuration/statsd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/configuration/statsd/</guid>
      <description>StatsD Besides supporting StatsD as an upstream backend to which InGRAINd can send data, it can also act as a StatsD server that accepts metrics from applications and forwards them to another upstream.
This allows you to use only InGRAINd on your system as the component that collects and forwards system performance, security, and application metrics.
An example config file that provides a local a StatsD collector then forwards it to an upstream server would look like this:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/configuration/syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/configuration/syntax/</guid>
      <description>Configuration syntax The configuration format used by ingraind is TOML.
The primary goal of the configuration system is to set up the grains and the processing pipelines used by ingraind.
The TOML file has two sections: the probes, and the pipelines.
Probes The probe array contains the configuration for the probes, and a single entry looks like this:
[[probe]] pipelines = [&amp;quot;my_pipeline&amp;quot;, &amp;quot;another_pipeline&amp;quot;] [probe.config] type = &amp;quot;Files&amp;quot; monitor_dirs = [&amp;quot;/&amp;quot;] The probe has to specify a list of pipelines that will receive its data.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/deployment/ansible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/deployment/ansible/</guid>
      <description>Ansible InGRAINd provides Ansible roles in the repository that you can lift and integrate into your deployment systems.
The role installs OSQuery by default on compatible systems, which means you can use the InGRAINd - OSQuery bridge to gather a wide range of system statistics using a single configuration file .
Configuration To keep configuration as simple as possible, the role relies on the following variables :
ingraind_circleci_url ingraind_circleci_sha256 ingraind_http_api_key ingraind_http_uri  By default the agent will send events to an HTTP backend periodically.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/deployment/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/deployment/kubernetes/</guid>
      <description>Kubernetes Monitoring a Kubernetes cluster is easy based on the YAML files that are in the InGRAINd repository.
You can use the following containers built from the InGRAINd releases for various platforms:
 latest-gke: Google Container Optimized OS (COS) latest-amzn2: Amazon Linux 2 latest-fedora31: Fedora 31 latest-elrepo8: CentOS8/Epel latest-elrepo7: CentOS7/Epel latest-ubuntu-18.04: Ubuntu 18.04  For deploying InGRAINd on Google Kubernetes Engine, use the latest-gke flavor, targeting Container Optimized OS (COS).</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/deployment/strategies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/deployment/strategies/</guid>
      <description>Deployment Strategies The best deployment strategy for your environment depends on a few factors. Whether you want to monitor containers, the orchestration service you&amp;rsquo;re running, and the amount of automation you already have, there are a few routes to go.
An abundance of containers To monitor containers across your fleet, you can use the native Kubernetes support. This comes packaged suitable for your environment and there&amp;rsquo;s no need to install drivers or kernel modules if you&amp;rsquo;re on one of the big cloud providers.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/devel/internals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/devel/internals/</guid>
      <description>How it all works  Build Build starts with build.rs going through all modules in the bpf/ directory, and:
 Compile all .c files with clang into BPF bytecode. Run bindgen for all structs, the names of which start with _data_ (e.g. _data_tcp_connect).  bpf_helpers.h is in the include directory, so bindgen can be run freely on all .h files under bpf/. This is quirky, but works.
The produced BPF bytecode ELF packages are embedded in the final binary using include_bytes!</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/devel/performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/devel/performance/</guid>
      <description>Performance The following measurements were done on an 8-core Intel(R) Core(TM) i5-8250U CPU @ 1.60GHz, Arch Linux, and ingraind @ 43281a7 .
The following command will produce the raw output:
cargo build --release &amp;amp;&amp;amp; \ sudo AWS_ACCESS_KEY_ID=x \ AWS_SECRET_ACCESS_KEY=x \ AWS_BUCKET=x \ AWS_INTERVAL=30 \ DNS_IF=wlp61s0 \ RUST_BACKTRACE=1 ./target/release/ingraind &amp;amp; sleep 5 \ &amp;amp;&amp;amp; (top -b -d 2 |grep ingraind) &amp;gt;top_log &amp;amp; \ iperf3 -t 10 -b 10M -c localhost &amp;gt; iperf_log \ &amp;amp;&amp;amp; sleep 1 &amp;amp;&amp;amp; iperf3 -t 10 -b 100M -c localhost &amp;gt;&amp;gt;iperf_log \ &amp;amp;&amp;amp; sleep 1 &amp;amp;&amp;amp; iperf3 -t 10 -b 1000M -c localhost &amp;gt;&amp;gt;iperf_log \ &amp;amp;&amp;amp; sleep 1 &amp;amp;&amp;amp; iperf3 -t 10 -b 10000M -c localhost &amp;gt;&amp;gt;iperf_log \ &amp;amp;&amp;amp; pkill top \ &amp;amp;&amp;amp; @ pkill ingraind  Looking through the logs, we can see that CPU use follows bandwidth:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/devel/profiling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/devel/profiling/</guid>
      <description>Profiling During development The recommended way to profile ingraind binaries is using perf. The default --release builds are not stripped, therefore it should be easy to analyse the results.
sudo perf record ./target/release/ingraind sudo perf report  Docker If running in a container, the recommended way is to start ingraind, then attach perf, and look the results off the box.
sudo docker run -d --name ingraind -e OPTION=value [...] --pid=host --net=host --privileged ingraind sudo perf record -a -p `pgrep ingraind`  Looking at the results in this scenario is a bit tricky, because we will need to tell perf where the binaries are located to resolve the symbols.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/getting-started/</guid>
      <description>Getting Started To get started with ingraind, you will need a Linux-based system. Generally, any recent release of a modern distribution will work fine.
To deploy on Kubernetes and on various cloud platforms, you will want to take a peek at our Kubernetes tutorial If you&amp;rsquo;re running Fedora 31, or Ubuntu 18.04, you will be able to get going using Docker and a configuration file.
A configuration file will look like the snippet below.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/grain/cargo-bpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/grain/cargo-bpf/</guid>
      <description>cargo bpf Work in progress</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/grain/ebpf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/grain/ebpf/</guid>
      <description>eBPF Work in progress&amp;hellip;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/grain/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/grain/intro/</guid>
      <description>Extending InGRAINd Work in progress&amp;hellip;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/grain/userspace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/grain/userspace/</guid>
      <description>Userspace events Work in progress&amp;hellip;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/home/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/home/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/shortcodes/buttons/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/shortcodes/buttons/</guid>
      <description>Buttons Buttons are styled links that can lead to local page or external link.
Example {{&amp;lt; button relref=&amp;#34;/&amp;#34; [class=&amp;#34;...&amp;#34;] &amp;gt;}}Get Home{{&amp;lt; /button &amp;gt;}} {{&amp;lt; button href=&amp;#34;https://github.com/alex-shpak/hugo-book&amp;#34; &amp;gt;}}Contribute{{&amp;lt; /button &amp;gt;}}  Get Home  Contribute  </description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/shortcodes/columns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/shortcodes/columns/</guid>
      <description>Columns Columns help organize shorter pieces of content horizontally for readability.
{{&amp;lt; columns &amp;gt;}} &amp;lt;!-- begin columns block --&amp;gt; # Left Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic sparator, between columns --&amp;gt; # Mid Content Lorem markdownum insigne... &amp;lt;---&amp;gt; &amp;lt;!-- magic sparator, between columns --&amp;gt; # Right Content Lorem markdownum insigne... {{&amp;lt; /columns &amp;gt;}} Example Left Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/shortcodes/expand/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/shortcodes/expand/</guid>
      <description>Expand Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.
Example Default {{&amp;lt; expand &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}}  Expand ↕  Markdown content Lorem markdownum insigne&amp;hellip;    With Custom Label {{&amp;lt; expand &amp;#34;Custom Label&amp;#34; &amp;#34;...&amp;#34; &amp;gt;}} ## Markdown content Lorem markdownum insigne... {{&amp;lt; /expand &amp;gt;}}  Custom Label ...  Markdown content Lorem markdownum insigne.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/shortcodes/hints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/shortcodes/hints/</guid>
      <description>Hints Hint shortcode can be used as hint/alerts/notification block.
There are 3 colors to choose: info, warning and danger.
{{&amp;lt; hint [info|warning|danger] &amp;gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{&amp;lt; /hint &amp;gt;}} Example Markdown content
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/shortcodes/katex/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/shortcodes/katex/</guid>
      <description>KaTeX KaTeX shortcode let you render math typesetting in markdown document. See KaTeX Example {{&amp;lt; katex [display] [class=&amp;#34;text-center&amp;#34;] &amp;gt;}} x = \begin{cases} a &amp;amp;\text{if } b \\ c &amp;amp;\text{if } d \end{cases} {{&amp;lt; /katex &amp;gt;}}     Display Mode Example Here is some inline example: \(\pi(x)\)  , rendered in the same line. And below is display example, having display: block \[ x = \begin{cases} a &amp;\text{if } b \\ c &amp;\text{if } d \end{cases} \]  Text continues here.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/shortcodes/mermaid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/shortcodes/mermaid/</guid>
      <description>Mermaid Chart  Mermaid is library for generating svg charts and diagrams from text.
Example {{&amp;lt; mermaid [class=&amp;#34;text-center&amp;#34;]&amp;gt;}} sequenceDiagram Alice-&amp;gt;&amp;gt;Bob: Hello Bob, how are you? alt is sick Bob-&amp;gt;&amp;gt;Alice: Not so good :( else is well Bob-&amp;gt;&amp;gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-&amp;gt;&amp;gt;Alice: Thanks for asking end {{&amp;lt; /mermaid &amp;gt;}}     </description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/docs/shortcodes/tabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/docs/shortcodes/tabs/</guid>
      <description>Tabs Tabs let you organize content by context, for example installation instructions for each supported platform.
{{&amp;lt; tabs &amp;#34;uniqueid&amp;#34; &amp;gt;}} {{&amp;lt; tab &amp;#34;MacOS&amp;#34; &amp;gt;}} # MacOS Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Linux&amp;#34; &amp;gt;}} # Linux Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; tab &amp;#34;Windows&amp;#34; &amp;gt;}} # Windows Content {{&amp;lt; /tab &amp;gt;}} {{&amp;lt; /tabs &amp;gt;}} Example MacOS MacOS This is tab MacOS content.
Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!</description>
    </item>
    
    <item>
      <title></title>
      <link>http://foniod.org/landing/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://foniod.org/landing/about/</guid>
      <description>ingraind and RedBPF are being developed by a community of individuals and companies from across the globe. The project is used in industries like security, gaming, or blockchain. ingraind was originally developed by Red Sift .
To learn more about contributing , please consult our documentation.</description>
    </item>
    
  </channel>
</rss>
